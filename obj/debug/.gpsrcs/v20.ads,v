head	1.24;
access;
symbols;
locks; strict;
comment	@-- @;


1.24
date	2022.01.29.15.56.54;	author sr;	state Exp;
branches;
next	1.23;

1.23
date	2022.01.29.15.05.16;	author sr;	state Exp;
branches;
next	1.22;

1.22
date	2022.01.29.15.05.07;	author sr;	state Exp;
branches;
next	1.21;

1.21
date	2022.01.29.15.02.57;	author sr;	state Exp;
branches;
next	1.20;

1.20
date	2022.01.29.15.02.26;	author sr;	state Exp;
branches;
next	1.19;

1.19
date	2022.01.29.15.01.29;	author sr;	state Exp;
branches;
next	1.18;

1.18
date	2022.01.29.15.00.10;	author sr;	state Exp;
branches;
next	1.17;

1.17
date	2022.01.29.15.00.02;	author sr;	state Exp;
branches;
next	1.16;

1.16
date	2022.01.29.14.48.18;	author sr;	state Exp;
branches;
next	1.15;

1.15
date	2022.01.29.14.48.04;	author sr;	state Exp;
branches;
next	1.14;

1.14
date	2022.01.29.14.47.03;	author sr;	state Exp;
branches;
next	1.13;

1.13
date	2022.01.29.14.44.48;	author sr;	state Exp;
branches;
next	1.12;

1.12
date	2022.01.29.14.40.35;	author sr;	state Exp;
branches;
next	1.11;

1.11
date	2022.01.29.14.40.02;	author sr;	state Exp;
branches;
next	1.10;

1.10
date	2022.01.29.14.39.47;	author sr;	state Exp;
branches;
next	1.9;

1.9
date	2022.01.29.14.39.34;	author sr;	state Exp;
branches;
next	1.8;

1.8
date	2022.01.29.14.37.03;	author sr;	state Exp;
branches;
next	1.7;

1.7
date	2022.01.29.14.36.38;	author sr;	state Exp;
branches;
next	1.6;

1.6
date	2022.01.29.14.36.23;	author sr;	state Exp;
branches;
next	1.5;

1.5
date	2022.01.29.14.31.05;	author sr;	state Exp;
branches;
next	1.4;

1.4
date	2022.01.29.14.28.16;	author sr;	state Exp;
branches;
next	1.3;

1.3
date	2022.01.29.09.28.41;	author sr;	state Exp;
branches;
next	1.2;

1.2
date	2022.01.29.09.25.07;	author sr;	state Exp;
branches;
next	1.1;

1.1
date	2022.01.29.09.23.17;	author sr;	state Exp;
branches;
next	;


desc
@@


1.24
log
@*** empty log message ***
@
text
@-------------------------------------------------------------------------------
--  ▖▖▄▖▄▖
--  ▌▌▄▌▛▌
--  ▚▘▙▖█▌
--
--  @@file      v20.ads
--  @@copyright See authors list below and v20.copyrights file
--  @@licence   GPL v3
--  @@encoding  UTF-8
-------------------------------------------------------------------------------
--  @@summary
--  V20 library definitions
--
--  @@description
--
--  @@authors
--  Stéphane Rivière - sr - sriviere@@soweb.io
--
--  @@versions
--  20210317 0.1 sr - initial release
--  20210322 0.1 sr - tio: integration
--  20210322 0.1 sr - cfg: integration
--  20210322 0.2 sr - v20: refactoring - standardize renames, help for
--                         GNATdoc, reorder and add many functions, delete all
--                         Integer and Real related types, put generics and 
--                         functions private
--  20210402 0.2 sr - cfg, log, prg, tio & vst: basic coding done
--  20210409 0.2 sr - prg: fix a bunch of small bugs, Put refactoring
--  20210411 0.3 sr - fls, sys: refactoring & create extend api too
--  20210414 0.4 sr - log: adjust again Line_Max_Length
--  20210731 0.5 sr - v20: API consistency: All strings constants and function 
--                         only returns VString typed. All strings parameters 
--                         accept both String and VString types.
--  20210804 0.6 sr - v20: Fix a RTE when a program is launched through a 
--                         symbolic link. Add Get_Build function.
-------------------------------------------------------------------------------

with Ada.Exceptions;
with Ada.Strings.Unbounded;

package v20 is

   -- Can't use v20-vst to avoid circular references
   package ASU renames Ada.Strings.Unbounded;
   
   -- Force a true (without an apostrophe pair generated by 'Image attribute) 
   -- character to string conversion by adding a trailing empty string.
   HT : constant String := Character'Val(9)  & ""; -- Tab
   LF : constant String := Character'Val(12) & ""; -- Line Feed
   CR : constant String := Character'Val(13) & ""; -- Carriage return
   DQ : constant String := Character'Val(34) & ""; -- Double quote
   
   ND : constant String := "~"; -- Name/value delimiter
   CD : constant String := "^"; -- Column delimiter
   RD : constant String := "\"; -- Row delimiter

   function Get_Version return ASU.Unbounded_String;
   --  Returns the Library name and formatted version like:
   --  “v20 v.minor.major”.
   
   function Get_Build return ASU.Unbounded_String;
   --  Returns the formatted build date stamp like:
   --  “build YYYY-mm-dd hh:mm:ss”.

   procedure Raise_Exception;
   --  Raise an exception for reporting test and <program_Name.err> file
   --  creation. In addition to the usual trace, a v20 exception give some
   --  extra information like : exception time, program uptime, program &
   --  library names & versions, start & home directories and Ada and all
   --  languages memory allocation, current & maximum (peak) values.

   procedure Exception_Handling
   (Exception_Hook : Ada.Exceptions.Exception_Occurrence);
   --  Process exceptions.

-------------------------------------------------------------------------------
private

   Name : constant String := "v20";
   --  Library's name

   Version_Major : constant Natural := 0;
   --  Library major version number

   Version_Minor : constant Natural := 6;
   --  Library minor version number

   --  135 cols width is the max full screen standard console on a rather old,
   --  but so good, Dell UltraSharp 1907Fp 1280x1024 4:3 monitor
   --  92 cols width is the max length useable in the "Listing 7" paragraph 
   --  style of AIDE Manual with B612 font.
   --  79 is the standard width.

   Line_Max_Length : constant Natural := 135;
   --Line_Max_Length : constant Natural := 92;
   --  Maximum line length for exceptions (.err) and log reports (.log)

   Errorlevel : Natural := 0;

------------------------------------------------------------------------------
end v20;
------------------------------------------------------------------------------
@


1.23
log
@*** empty log message ***
@
text
@d46 2
a47 1
   -- Dirty trick to force string conversion
@


1.22
log
@*** empty log message ***
@
text
@a44 1
   package ACL renames Ada.Characters.Latin_1;
@


1.21
log
@*** empty log message ***
@
text
@a38 1
with Ada.Characters.Latin_1;
a45 9

   HT : constant String := ACL.HT'Image;        -- Tab
   LF : constant String := ACL.LF'Image;        -- Line Feed
   CR : constant String := ACL.CR'Image;        -- Carriage return
   --DQ : constant String := "" & ACL.Quotation'Image; -- Double quote
--   DQ : constant String := Character'Val(34)'Image;

   DQ : constant String := Character'val(ACL.Quotation) & ""; -- Double quote
   --DQ : constant String := Character'Val(34) & "";
d47 9
a55 3
   ND : constant String := "~";                 -- Name/value delimiter
   CD : constant String := "^";                 -- Column delimiter
   RD : constant String := "\";                 -- Row delimiter
@


1.20
log
@*** empty log message ***
@
text
@d54 1
a54 1
   DQ : constant String := "" & Character'ACL.Quotation; -- Double quote
@


1.19
log
@*** empty log message ***
@
text
@d54 1
a54 1
   DQ : constant String := Character'ACL.Quotation & ""; -- Double quote
@


1.18
log
@*** empty log message ***
@
text
@d53 3
a56 1
   DQ : constant String := Character'Val(34) & "";
@


1.17
log
@*** empty log message ***
@
text
@d54 1
a54 1
   DQ : constant String := Character'Val(34);
@


1.16
log
@*** empty log message ***
@
text
@d52 3
a54 1
   DQ : constant String := Character'Val(34)'Image;
@


1.15
log
@*** empty log message ***
@
text
@d52 1
a52 1
   DQ : constant String := Character'Val(34);
@


1.14
log
@*** empty log message ***
@
text
@d51 2
a52 1
   DQ : constant String := "" & ACL.Quotation'Image; -- Double quote
@


1.13
log
@*** empty log message ***
@
text
@d51 1
a51 1
   DQ : constant String := ACL.Quotation'Image; -- Double quote
a54 2


@


1.12
log
@*** empty log message ***
@
text
@a43 8
   TAB : constant String := Ada.Characters.Latin_1.HT'Image; -- Tab
   LF : constant String := To_String(Chr(12)); -- Line Feed
   
   DQ : constant String := To_String(Chr(34)); -- Double quote
   ND : constant String := "~";                -- Name/value delimiter
   CD : constant String := "^";                -- Column delimiter
   RD : constant String := "\";                -- Row delimiter

d46 11
@


1.11
log
@*** empty log message ***
@
text
@d44 1
a44 1
   TAB : constant String := Ada.Characters.Latin_1.HT; -- Tab
@


1.10
log
@*** empty log message ***
@
text
@d39 1
a39 1
with Ada.Characters;
@


1.9
log
@*** empty log message ***
@
text
@d44 1
a44 1
   TAB : constant String := Ada.Characters.ASCII.HT; -- Tab
@


1.8
log
@*** empty log message ***
@
text
@d44 1
a44 1
   TAB : constant String := Ada.Characters.ASCII.TAB; -- Tab
@


1.7
log
@*** empty log message ***
@
text
@d44 1
a44 1
   TAB : constant String := ASCII.TAB; -- Tab
@


1.6
log
@*** empty log message ***
@
text
@d39 1
@


1.5
log
@*** empty log message ***
@
text
@d43 1
a43 1
   TAB : constant String := "" & Chr(9); -- Tab
@


1.4
log
@*** empty log message ***
@
text
@d43 1
a43 1
   TAB : constant String := To_String(Chr(9)); -- Tab
@


1.3
log
@*** empty log message ***
@
text
@d43 7
a49 3
   ND : constant String := "~"; -- Name/value delimiter
   CD : constant String := "^"; -- Column delimiter
   RD : constant String := "\"; -- Row delimiter
@


1.2
log
@*** empty log message ***
@
text
@a40 2
with v20.Vst; use v20.Vst;

d43 3
a45 3
   ND : constant VString := +"~"; -- Name/value delimiter
   CD : constant VString := +"^"; -- Column delimiter
   RD : constant VString := +"\"; -- Row delimiter
@


1.1
log
@Initial revision
@
text
@d41 2
@
