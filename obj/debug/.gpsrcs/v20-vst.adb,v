head	1.41;
access;
symbols;
locks; strict;
comment	@-- @;


1.41
date	2022.01.29.19.16.08;	author sr;	state Exp;
branches;
next	1.40;

1.40
date	2022.01.29.13.32.46;	author sr;	state Exp;
branches;
next	1.39;

1.39
date	2022.01.29.13.32.02;	author sr;	state Exp;
branches;
next	1.38;

1.38
date	2022.01.29.13.31.52;	author sr;	state Exp;
branches;
next	1.37;

1.37
date	2022.01.29.13.28.19;	author sr;	state Exp;
branches;
next	1.36;

1.36
date	2022.01.29.13.25.20;	author sr;	state Exp;
branches;
next	1.35;

1.35
date	2022.01.29.13.20.17;	author sr;	state Exp;
branches;
next	1.34;

1.34
date	2022.01.29.13.19.21;	author sr;	state Exp;
branches;
next	1.33;

1.33
date	2022.01.29.13.18.35;	author sr;	state Exp;
branches;
next	1.32;

1.32
date	2022.01.29.13.17.28;	author sr;	state Exp;
branches;
next	1.31;

1.31
date	2022.01.29.13.17.01;	author sr;	state Exp;
branches;
next	1.30;

1.30
date	2022.01.29.13.14.08;	author sr;	state Exp;
branches;
next	1.29;

1.29
date	2022.01.29.13.07.15;	author sr;	state Exp;
branches;
next	1.28;

1.28
date	2022.01.29.13.06.19;	author sr;	state Exp;
branches;
next	1.27;

1.27
date	2022.01.29.12.58.41;	author sr;	state Exp;
branches;
next	1.26;

1.26
date	2022.01.29.12.07.28;	author sr;	state Exp;
branches;
next	1.25;

1.25
date	2022.01.29.10.01.49;	author sr;	state Exp;
branches;
next	1.24;

1.24
date	2022.01.29.10.00.51;	author sr;	state Exp;
branches;
next	1.23;

1.23
date	2022.01.29.09.59.18;	author sr;	state Exp;
branches;
next	1.22;

1.22
date	2022.01.29.09.58.41;	author sr;	state Exp;
branches;
next	1.21;

1.21
date	2022.01.29.09.57.07;	author sr;	state Exp;
branches;
next	1.20;

1.20
date	2022.01.29.09.56.03;	author sr;	state Exp;
branches;
next	1.19;

1.19
date	2022.01.29.09.54.45;	author sr;	state Exp;
branches;
next	1.18;

1.18
date	2022.01.29.09.52.38;	author sr;	state Exp;
branches;
next	1.17;

1.17
date	2022.01.29.09.41.12;	author sr;	state Exp;
branches;
next	1.16;

1.16
date	2022.01.29.09.39.17;	author sr;	state Exp;
branches;
next	1.15;

1.15
date	2022.01.29.09.34.01;	author sr;	state Exp;
branches;
next	1.14;

1.14
date	2022.01.29.09.33.34;	author sr;	state Exp;
branches;
next	1.13;

1.13
date	2022.01.29.09.30.13;	author sr;	state Exp;
branches;
next	1.12;

1.12
date	2022.01.29.09.29.56;	author sr;	state Exp;
branches;
next	1.11;

1.11
date	2022.01.29.09.28.41;	author sr;	state Exp;
branches;
next	1.10;

1.10
date	2022.01.29.09.18.44;	author sr;	state Exp;
branches;
next	1.9;

1.9
date	2022.01.29.09.17.04;	author sr;	state Exp;
branches;
next	1.8;

1.8
date	2022.01.29.09.16.12;	author sr;	state Exp;
branches;
next	1.7;

1.7
date	2022.01.28.19.26.26;	author sr;	state Exp;
branches;
next	1.6;

1.6
date	2022.01.28.19.24.42;	author sr;	state Exp;
branches;
next	1.5;

1.5
date	2022.01.28.19.24.15;	author sr;	state Exp;
branches;
next	1.4;

1.4
date	2022.01.28.19.23.15;	author sr;	state Exp;
branches;
next	1.3;

1.3
date	2022.01.28.19.20.40;	author sr;	state Exp;
branches;
next	1.2;

1.2
date	2022.01.28.10.15.32;	author sr;	state Exp;
branches;
next	1.1;

1.1
date	2022.01.28.09.26.44;	author sr;	state Exp;
branches;
next	;


desc
@@


1.41
log
@*** empty log message ***
@
text
@------------------------------------------------------------------------------
--  ▖▖▄▖▄▖
--  ▌▌▄▌▛▌
--  ▚▘▙▖█▌
--
--  @@file      v20-vst.adb
--  @@copyright See authors list below and v20.copyrights file
--  @@licence   EUPL 1.2
--  @@encoding  UTF-8
------------------------------------------------------------------------------
--  @@summary
--  V20 library VStrings from HAC runtime by Gautier de Montmollin
--
--  @@description
--
--  @@authors
--  Gautier de Montmollin - gdm - https://github.com/zertovitch (author)
--  Stéphane Rivière - sr - sriviere@@soweb.io (integration)
--
--  @@versions
--  see v20.ads
-------------------------------------------------------------------------------

with Ada.Strings.Fixed;

with v20.Log;
with v20.Tio;

package body v20.Vst is

   use Interfaces;

   package AS renames Ada.Strings;
   package ASF renames Ada.Strings.Fixed;

   --  Service functions ------------------------------------------------------

   function HAC_Image (I : Integer) return String is
      Im : constant String := Integer'Image (I);
   begin
      if I < 0 then
         return Im;
      else
         return Im (Im'First + 1 .. Im'Last);
      end if;
   end HAC_Image;

   function HAC_Generic_Image (I : Abstract_Integer) return String is
      Im : constant String := Abstract_Integer'Image (I);
   begin
      if I < 0 then
         return Im;
      else
         return Im (Im'First + 1 .. Im'Last);  --  Remove the leading ' '.
      end if;
   end HAC_Generic_Image;

   --  Types conversion -------------------------------------------------------

   function To_VString (B : Boolean) return VString is
   begin
      if B then
         return +"True";
      else
         return +"False";
      end if;
   end To_VString;

   function To_VString (I : Integer) return VString is
      function HAC_Image_for_Integer is
      new v20.Vst.HAC_Generic_Image (Abstract_Integer => Integer);
   begin
      return +HAC_Image_for_Integer (I);
   end To_VString;

   function To_VString (C : Character) return VString is
   begin
      return To_VString ((1 => C));
   end To_VString;

   function To_Integer (V : VString) return Integer is
   begin
      return Integer'Value (ASU.To_String (V));
   end To_Integer;

   function To_Integer (V : String) return Integer is
   begin
      return Integer'Value (V);
   end To_Integer;

   function To_String (V : VString) return String is
   begin
      return ASU.To_String (V);
   end To_String;

   function To_Hex (Byte : Unsigned8) return String is
      Hex_Chars : constant array (Unsigned8 range 0 .. 15)
        of Character := ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F');
      Half_Byte_1 : constant Unsigned8 := Byte mod 16;
      Half_Byte_2 : constant Unsigned8 := Byte / 16;
   begin
      return Hex_Chars (Half_Byte_2) & Hex_Chars (Half_Byte_1);
   end To_Hex;

   function To_Hex (String_To_Convert : VString) return VString is
      String_Extracted : String := " ";
      String_Converted : VString := +"";
   begin
      for I in 1 .. Length (String_To_Convert) loop
         String_Extracted := ASU.Slice (Source => String_To_Convert, Low => I, High => I);
         ASU.Append (String_Converted, To_Hex ( Character'Pos (String_Extracted(1))) & " ");
      end loop;
      return String_Converted;
   end To_Hex;

   function To_Val (S_In : VString) return VString is
      S_Out : VString := +"";
   begin
      if Length (S_In) > 0 then
         for I in 1 .. Length (S_In) loop
            S_Out := S_Out & To_VString ( Character'Pos ((Element (S_In, I))) ) & " ";
         end loop;
      end if;
      return S_Out;
   end To_Val;

   --  Basics -----------------------------------------------------------------

   function Empty (Source : String) return Boolean is
   begin
      return (Length (To_VString (Source)) = 0);
   end Empty;

   function Empty (Source : VString) return Boolean is
   begin
      return (Length (Source) = 0);
   end Empty;

   function Length (Source : String) return Natural is
   begin
      return Length (To_VString (Source));
   end Length;

   function Trim_Left  (Source : VString) return VString is
   begin
      return ASU.Trim (Source, AS.Left);
   end Trim_Left;

   function Trim_Right (Source : VString) return VString is
   begin
      return ASU.Trim (Source, AS.Right);
   end Trim_Right;

   function Trim_Both  (Source : VString) return VString is
   begin
      return ASU.Trim (Source, AS.Both);
   end Trim_Both;

   function Trim_Slashes (Source : VString) return VString is
      Src : VString := Source;
   begin
      --  Specific case
      if Src = "/" then
         Src := +"";
      end if;
      --  Suppress leading slash(es)
      while Index (Src, "/") = 1 and Length (Src) > 1 loop
         Src := Slice (Src, 2, Length (Src));
      end loop;
      --  Suppress trailing slash(es)
      while Index_Backward (Src, "/") = Length (Src) and Length (Src) > 1 loop
         Src := Slice (Src, 1, Length (Src) - 1);
      end loop;
      return Src;
   end Trim_Slashes;

   function To_Lower (Item : String) return VString is
   begin
      return To_VString (ACH.To_Lower (Item));
   end To_Lower;

   function To_Lower (Item : VString) return VString is
   begin
      return +ACH.To_Lower (ASU.To_String (Item));
   end To_Lower;

   function To_Upper (Item : String) return VString is
   begin
      return To_VString (ACH.To_Upper (Item));
   end To_Upper;

   function To_Upper (Item : VString) return VString is
   begin
      return +ACH.To_Upper (ASU.To_String (Item));
   end To_Upper;

   --  Detecting if pattern exist

   function Starts_With (Item : VString; Pattern : Character) return Boolean is
   begin
      return 1 <= Length (Item) and then Element (Item, 1) = Pattern;
   end Starts_With;

   function Starts_With (Item : VString; Pattern : String) return Boolean is
   begin
      return Pattern'Length <= Length (Item)
      and then ASU.To_String (ASU.Head (Item, Pattern'Length)) = Pattern;
   end Starts_With;

   function Starts_With (Item : VString; Pattern : VString) return Boolean is
   begin
      return Length (Pattern) <= Length (Item)
      and then ASU.Head (Item, Length (Pattern)) = Pattern;
   end Starts_With;

   function Ends_With (Item : VString; Pattern : Character) return Boolean is
   begin
      return 1 <= Length (Item) and
      then Element (Item, Length (Item)) = Pattern;
   end Ends_With;

   function Ends_With (Item : VString; Pattern : String) return Boolean is
   begin
      return Pattern'Length <= Length (Item)
      and then ASU.To_String (ASU.Tail (Item, Pattern'Length)) = Pattern;
   end Ends_With;

   function Ends_With (Item : VString; Pattern : VString) return Boolean is
   begin
      return Length (Pattern) <= Length (Item)
      and then ASU.Tail (Item, Length (Pattern)) = Pattern;
   end Ends_With;

   -- Counting

   function Char_Count (String_To_Process : VString ; Char_Set_Pattern : VString) return Integer is
      Result_Count : Integer := 0;
      String_To_Process_Length : constant Natural := Length (String_To_Process);
      Char_Set_Pattern_Length : constant Natural := Length (Char_Set_Pattern);
   begin
      for I in 1 .. String_To_Process_Length loop
         for J in 1 .. Char_Set_Pattern_Length loop
            if Slice (String_To_Process, I, I) = Slice (Char_Set_Pattern, J, J) then
               Result_Count := Result_Count + 1;
               exit;
            end if;
         end loop;
      end loop;
      return Result_Count;
   end Char_Count;

   function Char_Count (String_To_Process : VString ; Char_Set_Pattern : String) return Integer is
   begin
      return Char_Count (String_To_Process, To_VString (Char_Set_Pattern));
   end Char_Count;

   --  Returning a pattern position -------------------------------------------

   function Index (Source : VString; Pattern : Character) return Natural is
   begin
      return ASU.Index (Source, (1 => Pattern));
   end Index;

   function Index (Source : VString; Pattern : String) return Natural is
   begin
      return ASU.Index (Source, Pattern);
   end Index;

   function Index (Source : VString; Pattern : VString) return Natural is
   begin
      return ASU.Index (Source, ASU.To_String (Pattern));
   end Index;

   function Index (Source : VString; Pattern : Character; From : Positive)
                   return Natural is
   begin
      return ASU.Index (Source, (1 => Pattern), From);
   end Index;

   function Index (Source : VString; Pattern : String; From : Positive)
                   return Natural is
   begin
      return ASU.Index (Source, Pattern, From);
   end Index;

   function Index (Source : VString; Pattern : VString; From : Positive)
                   return Natural is
   begin
      return ASU.Index (Source, ASU.To_String (Pattern), From);
   end Index;

   function Index_Backward (Source : VString; Pattern : Character)
                            return Natural is
   begin
      return ASU.Index (Source, (1 => Pattern), Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : VString; Pattern : String)
                           return Natural is
   begin
      return ASU.Index (Source, Pattern, Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : VString; Pattern : VString)
                           return Natural is
   begin
      return ASU.Index (Source, ASU.To_String (Pattern), Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : String; Pattern : String)
                            return Natural is
   begin
      return ASU.Index (To_VString (Source), Pattern, Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : VString;
                            Pattern : Character;
                            From : Positive)
                            return Natural is
   begin
      return ASU.Index (Source, (1 => Pattern), From, Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : VString;
                            Pattern : String;
                            From : Positive)
                            return Natural is
   begin
      return ASU.Index (Source, Pattern, From, Ada.Strings.Backward);
   end Index_Backward;

   function Index_Backward (Source : VString;
                            Pattern : VString;
                            From : Positive)
                            return Natural is
   begin
      return ASU.Index (Source,
                         ASU.To_String (Pattern), From, Ada.Strings.Backward);
   end Index_Backward;

   --  Extracting substring form position -------------------------------------

   function Head (Source : VString; Count : Natural) return VString is
   begin
      return ASU.Head (Source, Count);  --  We use the default padding: ' '.
   end Head;

   function Tail (Source : VString; Count : Natural) return VString is
   begin
      return ASU.Tail (Source, Count);  --  We use the default padding: ' '.
   end Tail;

   function Slice (Source : String; Low : Positive; High : Natural)
                  return VString is
   begin
      return +ASU.Slice (To_VString (Source), Low, High);
   end Slice;

   function Slice (Source : VString; Low : Positive; High : Natural)
                  return VString is
   begin
      return +ASU.Slice (Source, Low, High);
   end Slice;

   --  Extracting substring from pattern --------------------------------------

   function Tail_After_Match (Source : VString; Pattern : VString)
                              return VString is
      Result : VString := +"";
      Source_Length : constant Natural := Length (Source);
      Pattern_Length : constant Natural := Length (Pattern);
   begin
      if (Source_Length > 0) and (Pattern_Length > 0) then
         for I in reverse 1 .. Source_Length loop
            if I <= Source_Length - Pattern_Length then
               if Slice (Source, I, I + Pattern_Length - 1) = Pattern then
                  Result := Slice (Source, I + Pattern_Length, Source_Length);
                  exit;
               end if;
            end if;
         end loop;
      end if;
      return Result;
   end Tail_After_Match;

   function Tail_After_Match (Source : String; Pattern : String)
                              return VString is
   begin
      return Tail_After_Match (To_VString (Source), +Pattern);
   end Tail_After_Match;

   function Tail_After_Match (Source : VString; Pattern : Character)
                              return VString is
   begin
      return Tail_After_Match (Source, (1 => Pattern));
   end Tail_After_Match;

   function Tail_After_Match (Source : VString; Pattern : String)
                              return VString is
   begin
      return Tail_After_Match (Source, +Pattern);
   end Tail_After_Match;

   --  Replace pattern --------------------------------------------------------

   function Replace_Pattern (String_To_Process : VString ;
              Pattern_In : VString ; Pattern_Out : VString) return VString is

      Result_String : VString := +"";
      Result_Char : VString;

      Pattern_In_Length : Natural := Length (Pattern_In);
      Pattern_Buffer : VString := +"";

      String_To_Process_Length : Natural := Length (String_To_Process);

   begin

      for I in 1 .. String_To_Process_Length loop
         Result_Char := Slice (String_To_Process, I, I);
         Pattern_Buffer := Pattern_Buffer & Result_Char;

         -- Sliding window
         if (Length (Pattern_Buffer) > Pattern_In_Length) then
            Pattern_Buffer := Slice (Pattern_Buffer, 2, Pattern_In_Length + 1);
         end if;

         if (Pattern_Buffer = Pattern_In) then
            Result_String := Slice (Result_String, 1, Length (Result_String) - Pattern_In_Length + 1) & Pattern_Out;
            Pattern_Buffer := +"";
         else
            Result_String := Result_String & Result_Char;
         end if;

      end loop;

      return Result_String;

   end Replace_Pattern;

   --  Fields processing ------------------------------------------------------

   function Field_By_Index (String_Input : VString ; Index_Field : Integer ; Field_Delimiter : String) return VString is
      Index_Count : Integer := 1;
      Result_String, Result_Char: VString := +"";
      String_To_Process : constant VString := String_Input & Field_Delimiter;
      String_To_Process_Length : constant Natural := Length (String_To_Process);
   begin
      for I in 1 .. String_To_Process_Length loop
         Result_Char := Slice (String_To_Process, I, I);
         if Result_Char = Field_Delimiter then
            if Index_Count = Index_Field then
               exit;
            else
               Index_Count := Index_Count + 1;
               Result_String := +"";
            end if;
         else
            Result_String := Result_String & Result_Char;
         end if;
      end loop;
      return Trim_Both (Result_String);
   end Field_By_Index;

   ---------------------------------------------------------------------------
   function Field_By_Name (String_Input : VString ; Field_To_Search : VString ; Field_Delimiter : String) return VString is
      Index_Count : Integer := 1;
      Result_String, Result_Char: VString := +"";
      String_To_Process : constant VString := String_Input & Field_Delimiter;
      String_To_Process_Length : constant Natural := Length (String_To_Process);
   begin
      for I in 1 .. String_To_Process_Length loop
         Result_Char := Slice (String_To_Process, I, I);
         if Result_Char = Field_Delimiter then
            if (Index (Result_String, Field_To_Search) > 0) then
               exit;
            else
               Index_Count := Index_Count + 1;
               Result_String := +"";
            end if;
         else
            Result_String := Result_String & Result_Char;
         end if;
      end loop;
      return Trim_Both (Result_String);
   end Field_By_Name ;

   ----------------------------------------------------------------------------
   function Field_Search (String_To_Process : VString ; Field_To_Search : VString ; Field_Delimiter : String) return Boolean is
      Result : Boolean := False;
   begin
      -- "a" should not be found in "span" so search "a & delimiter"
      if (Index (String_To_Process & Field_Delimiter, Field_To_Search & Field_Delimiter) > 0) then
         Result := True;
      end if;
      return Result;
   end Field_Search;

   ---------------------------------------------------------------------------
   function Field_Count (String_To_Process : VString ; Field_Delimiter : String) return Integer is
      Result_Count : Natural := 0;
      String_Length : constant Natural := Length (String_To_Process);
   begin
      if (String_Length > 0) then
         Result_Count := Char_Count (String_To_Process, Field_Delimiter);
         -- String not ending with field delimiter
         if (Slice (String_To_Process, String_Length, String_Length) /= Field_Delimiter) then
            Result_Count := Result_Count + 1;
         end if;
      end if;
      return Result_Count;
   end Field_Count;

   ----------------------------------------------------------------------------
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Custom_Header : String := "") is
      Columns : Natural := Field_Count (Field_By_Index (String_To_Process, 1, Row_Delimiter), Column_Delimiter);
      Rows : Positive := Field_Count (String_To_Process, Row_Delimiter);
      Header : VString := To_VString (Custom_Header);
      Max_Width : Natural := 0;
      Current_Column, Current_Row : VString := +"";

      type T_Display is array (Integer range <>, Integer range <>) of VString;
      Display : T_Display (0..Rows+1, 0..Columns+1);

   begin

      --Log.Dbg ("Columns " & To_VString (Columns));
      --Log.Dbg ("Rows " & To_VString (Rows));

      -- Format
      for Index_Columns in 1..Columns loop

         -- Get max header width
         if Length (Header) > 0 then
            Max_Width := Length (Field_By_Index (Header, Index_Columns, ","));
         end if;

         -- Get max column width
         for Index_Rows in 1..Rows loop
            Current_Column := Field_By_Index (Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter), Index_Columns, Column_Delimiter);
            if Length (Current_Column) > Max_Width then
               Max_Width := Length (Current_Column);
            end if;
         end loop;

         --Log.Dbg ("Max_Width for column " & Current_Column & ": " & To_VString (Max_Width));

         -- Format header
         if Length (Header) > 0 then
            Current_Column := Field_By_Index (Header, Index_Columns, ",");
            Display (0, Index_Columns) := Current_Column & (Max_Width - Length (Current_Column)) * " " ;
         end if;

         -- Format column
         for Index_Rows in 1..Rows loop
            Current_Column := Field_By_Index (Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter), Index_Columns, Column_Delimiter);
            Display (Index_Rows, Index_Columns) := Current_Column & (Max_Width - Length (Current_Column)) * " " ;
         end loop;

      end loop;

      -- Display header
      if Length (Header) > 0 then
         Max_Width := 0;
         for Index_Columns in 1..Columns loop
            Current_Column := Display (0, Index_Columns) & "  ";
            Max_Width := Max_Width + Length (Current_Column);
            Tio.Put (Current_Column);
         end loop;
         Tio.Line;
         Tio.Put_Line ( (Max_Width - 2) * "-");
      end if;

      -- Display rows
      for Index_Rows in 1..Rows loop
         for Index_Columns in 1..Columns loop
            Tio.Put (Display (Index_Rows, Index_Columns) & "  ");
         end loop;
         Tio.Line;
      end loop;

   end Field_Display;

   --  Operators --------------------------------------------------------------

   function "&" (I : Integer; V : VString) return VString is
   begin
      return HAC_Image (I) & V;
   end "&";

   function "&" (V : VString; I : Integer) return VString is
   begin
      return V & HAC_Image (I);
   end "&";

   function "*" (Num : Natural; Pattern : String) return VString is
   begin
      return +ASF."*" (Num, Pattern);
   end "*";

-------------------------------------------------------------------------------
end v20.Vst;
-------------------------------------------------------------------------------
@


1.40
log
@*** empty log message ***
@
text
@d571 1
a571 1
         Tio.Put_Line ( (Max_Width - 3) * "-");
@


1.39
log
@*** empty log message ***
@
text
@d571 1
a571 1
         Tio.Put_Line ( (Max_Width - 2) * "-");
@


1.38
log
@*** empty log message ***
@
text
@d566 1
a566 1
            Current_Column := Display (0, Index_Columns) & "  "
@


1.37
log
@*** empty log message ***
@
text
@d564 1
d566 3
a568 1
            Tio.Put (Display (0, Index_Columns) & "  ");
d571 1
@


1.36
log
@*** empty log message ***
@
text
@d527 2
a528 2
      Log.Dbg ("Columns " & To_VString (Columns));
      Log.Dbg ("Rows " & To_VString (Rows));
d546 1
a546 1
         Log.Dbg ("Max_Width for column " & Current_Column & ": " & To_VString (Max_Width));
@


1.35
log
@*** empty log message ***
@
text
@d515 1
a515 3
                                               --function Read (Table_Name : VString; Columns : VString; Condition : VString := +"") return VString is
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header1 : String := "") is
   --procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String) is
d518 1
a518 1

a521 1
      Header : VString := To_VString (Header1);
d563 6
a568 6
      for Index_Columns in 1..Columns loop

         --Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
         Tio.Put (Display (0, Index_Columns) & "  ");
      end loop;
      Tio.Line;
d571 1
a571 4
      for Index_Rows in 0..Rows loop

         --Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
         --Tio.Put (Display (Index_Rows, Index_Columns) & "  ");
a576 26

         --     Display (Index_Rows, Index_Columns) := Current_Column;
         --
         --  Log.Dbg ("Max_Width for column " & Current_Column & ": " & To_VString (Max_Width));
         --  -- Column length formatting
         --  for Index_Columns in 1..Columns loop
         --     Log.Dbg (Display (Index_Rows, Index_Columns));
         --  end loop;
         --

      --  for Index_Rows in 1..Rows loop
      --     Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
      --     for Index_Columns in 1..Columns loop
      --        Current_Column := Field_By_Index (Current_Row, Index_Columns, Column_Delimiter);
      --        if Length (Current_Column) > Max_Width then
      --           Max_Width := Length (Current_Column);
      --        end if;
      --        Display (Index_Rows, Index_Columns) := Current_Column;
      --     end loop;
      --     Log.Dbg ("Max_Width for column " & Current_Column & ": " & To_VString (Max_Width));
      --     -- Column length formatting
      --     for Index_Columns in 1..Columns loop
      --        Log.Dbg (Display (Index_Rows, Index_Columns));
      --     end loop;
      --  end loop;

@


1.34
log
@*** empty log message ***
@
text
@d516 1
a516 1
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header : String := "") is
d524 1
@


1.33
log
@*** empty log message ***
@
text
@d516 1
a516 1
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header : VString := +"") is
@


1.32
log
@*** empty log message ***
@
text
@d516 1
a516 1
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header : VString) is
@


1.31
log
@*** empty log message ***
@
text
@d516 1
a516 1
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header1 : VString) is
d522 1
a522 1
      Header, Current_Column, Current_Row : VString := +"";
@


1.30
log
@*** empty log message ***
@
text
@d516 1
a516 1
   procedure Field_Display (String_To_Process : VString; Column_Delimiter: String ; Row_Delimiter: String; Header1 : VString := +"") is
@


1.29
log
@*** empty log message ***
@
text
@d515 2
a516 1
   procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String ; Header1 : VString := +"") is
@


1.28
log
@*** empty log message ***
@
text
@d515 2
a516 2
   --procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String ; Header : VString := +"") is
   procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String) is
@


1.27
log
@*** empty log message ***
@
text
@d515 2
a516 1
   procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String ; Header : VString := +"") is
d521 1
a521 1
      Current_Column, Current_Row : VString := +"";
@


1.26
log
@*** empty log message ***
@
text
@d550 1
a550 1
            Current_Column := Field_By_Index (Header, Index_Columns, ",")
@


1.25
log
@*** empty log message ***
@
text
@d515 1
a515 3
   --procedure Field_Display (String_To_Process : VString ; Row_Delimiter : String ; Column_Delimiter : String) is
   procedure Field_Display (String_To_Process : VString ; Column_Delimiter : String ; Row_Delimiter : String) is
      --Line : VString := Field_By_Index (String_To_Process, 1, Row_Delimiter);
d523 1
a523 1
      Display : T_Display (1..Rows, 1..Columns);
d533 5
d548 6
d562 2
a563 2
      -- Display
      for Index_Rows in 1..Rows loop
d565 4
a568 1
         Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
d570 5
a578 2


@


1.24
log
@*** empty log message ***
@
text
@d517 3
a519 3
      Line : VString := Field_By_Index (String_To_Process, 1, Row_Delimiter);
      Columns : Natural := Field_Count (Line, Column_Delimiter);
      Rows : Positive := Field_Count (Line, Row_Delimiter);
@


1.23
log
@*** empty log message ***
@
text
@d529 3
@


1.22
log
@*** empty log message ***
@
text
@d534 1
a534 2
            Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
            Current_Column := Field_By_Index (Current_Row, Index_Columns, Column_Delimiter);
d544 1
a544 2
            Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
            Current_Column := Field_By_Index (Current_Row, Index_Columns, Column_Delimiter);
@


1.21
log
@*** empty log message ***
@
text
@d534 1
d545 1
@


1.20
log
@*** empty log message ***
@
text
@d540 2
@


1.19
log
@*** empty log message ***
@
text
@d543 1
a543 1
            Display (Index_Rows, Index_Columns) := Current_Column & (Max_Width - Length (Current_Column)) * " ") ;
d554 1
a554 1
            Tio.Put (Display (Index_Rows, Index_Columns)) & "  ");
d556 1
a556 1
         Tio.Put_Line;
@


1.18
log
@*** empty log message ***
@
text
@d27 1
d543 1
a543 1
            Display (Index_Rows, Index_Columns) := Current_Column * (Max_Width - Length (Current_Column), ' ') ;
@


1.17
log
@*** empty log message ***
@
text
@d514 2
a515 1
   procedure Field_Display (String_To_Process : VString ; Row_Delimiter : String ; Column_Delimiter : String) is
d528 5
a532 3
      for Index_Rows in 1..Rows loop
         Current_Row := Field_By_Index (String_To_Process, Index_Rows, Row_Delimiter);
         for Index_Columns in 1..Columns loop
a536 1
            Display (Index_Rows, Index_Columns) := Current_Column;
d539 13
a551 2
         Log.Dbg ("Max_Width for column " & Current_Column & ": " & To_VString (Max_Width));
         -- Column length formatting
d553 1
a553 1
            Log.Dbg (Display (Index_Rows, Index_Columns));
d555 2
d559 26
@


1.16
log
@*** empty log message ***
@
text
@d537 1
a537 1
         Log.Dbg ("Max_Width for column" & Current_Column & ": " & To_VString (Max_Width));
@


1.15
log
@*** empty log message ***
@
text
@d526 1
d537 1
@


1.14
log
@*** empty log message ***
@
text
@d252 1
@


1.13
log
@*** empty log message ***
@
text
@d251 4
d503 1
a503 1
         Result_Count := Char_Count (String_To_Process, To_VString (Field_Delimiter));
@


1.12
log
@*** empty log message ***
@
text
@d499 1
a499 1
         Result_Count := Char_Count (String_To_Process, To_String (Field_Delimiter));
@


1.11
log
@*** empty log message ***
@
text
@d499 1
a499 1
         Result_Count := Char_Count (String_To_Process, Field_Delimiter);
@


1.10
log
@*** empty log message ***
@
text
@d437 1
a437 1
   function Field_By_Index (String_Input : VString ; Index_Field : Integer ; Field_Delimiter : VString) return VString is
d460 1
a460 1
   function Field_By_Name (String_Input : VString ; Field_To_Search : VString ; Field_Delimiter : VString) return VString is
d483 1
a483 1
   function Field_Search (String_To_Process : VString ; Field_To_Search : VString ; Field_Delimiter : VString) return Boolean is
d494 1
a494 1
   function Field_Count (String_To_Process : VString ; Field_Delimiter : VString) return Integer is
d509 1
a509 1
   procedure Field_Display (String_To_Process : VString ; Row_Delimiter : VString ; Column_Delimiter : VString) is
@


1.9
log
@*** empty log message ***
@
text
@a514 1

a517 1

@


1.8
log
@*** empty log message ***
@
text
@d518 1
a518 1
      type T_Display is array (integer range <>, integer range <>) of VString;
d520 1
a520 1
      Display : array (1..Rows, 1..Columns);
@


1.7
log
@*** empty log message ***
@
text
@d513 1
a513 1
      Display : array (Rows, Columns) of VString;
d517 4
@


1.6
log
@*** empty log message ***
@
text
@d512 2
a513 2
      Rows1 : Natural := Field_Count (Line, Row_Delimiter);
      Display : array (Rows1, Columns) of VString;
d519 1
a519 1
      for Index_Rows in 1..Rows1 loop
@


1.5
log
@*** empty log message ***
@
text
@d512 2
a513 2
      Rows : Natural := Field_Count (Line, Row_Delimiter);
      Display : array (Rows, Columns) of VString;
d519 1
a519 1
      for Index_Rows in 1..Rows loop
@


1.4
log
@*** empty log message ***
@
text
@d536 1
a536 6
      -- "a" should not be found in "span" so search "a & delimiter"
      if (Index (String_To_Process & Field_Delimiter, Field_To_Search & Field_Delimiter) > 0) then
         Result := True;
      end if;
      return Result;
   end Field_Search;
@


1.3
log
@*** empty log message ***
@
text
@d26 2
d509 4
a512 4
   procedure Field_Display (String_To_Process : VString ; Column_Delimiter : VString ; Line_Delimiter : VString) is
      Line : VString := Field_By_Index (String_To_Process, 1, RD);
      Columns : Natural := Field_Count (Line, CD);
      Rows : Natural := Field_Count (Line, RD);
d514 1
a514 1
      Length : Natural := 0;
d520 1
a520 1
         Current_Row := Field_By_Index (String_To_Process, Index_Rows, RD);
d522 3
a524 3
            Current_Column := Field_By_Index (Current_Row, Index_Columns, RD);
            if Length (Current_Column) > Length then
               Length := Length (Current_Column);
@


1.2
log
@*** empty log message ***
@
text
@d506 35
@


1.1
log
@Initial revision
@
text
@d104 1
a104 1
      String_Converted :VString := +"";
@
